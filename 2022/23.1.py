a="""#..###...#..##.#####...#.##...####.###.#...##..##.#.#.#.#.#...##.......#
..##.#.##..#.##..#.......######..#..###.###########.#.##..#..##.#...#..#
##..#...###....####.##.#.##.##.....#.##....##..#..##.#.......##.#...###.
##....#.#####...##....###..#....###..#.####..###.##....##....##.#...#.##
.##.##..###.##..#.####.##.#.######....#....##.###..########..#.###..#.#.
#..###.#.###.#...#.#.####.##..#####...#..###.....#.#.##..#.##.####.#####
..##..##..####.###.##.#.#..####..#...##..##..#.##..###.#.#..#......##..#
##.#....#....#.#...#....###.###.....##.#.#..####.#...##.#.#.#..#...###.#
#..#.#.#.#.#.##.#...##.##...#..#..####.##....##.#..#....##.####..###..##
###..#.#.#...#....######.####...#.##.#.......#.##.#....#..#######..#.###
##.##.########.####..#....#...##..#....##.#..###.#.#......#..#.##.##..#.
##.#.#..#.###.....#..##....###...####..##.##...#....##.######.##.#.#....
###.#..###.#....#......#.####.#..####...#.##.####...#########......#.#.#
.##.##..#.#..####.#....#.#.#..####.#..#.######....#####.#.#.##.###.....#
###..##.....##.##.......#........#.......###...#........#####.##...####.
.#.#..#.####...####....#.#..##.####..####.##......##.#.#.#..####.####...
...####...###..#.##..#.##..####...##..##.##.#..###..#.##.##..####.##..##
.##..#....#.#..########.#.#...#.#..#####.#.....#.##.#.#.#.#.#.....###.##
###.#..##.#...#.##.###...##......##..#.###...#..####...###..###..#..#...
.#.####.####...#.#..#####.....###......##..##....###.#.#.#..##.##.#.#..#
.##.###....##..#.##.##.##..#####.#.##.#....###...#..#.##.#.#....#..#..##
...##.###....##.###...#..####..##..#....##....#...#..##.#......##.#.....
.##.#.#..#..#.#....#....####.##.#.###...###.#..#.#...#..#....###..##.##.
#..###.##..###..#.#.#.##..###....#.#.#.##.............#.##.##..#..###.##
.....#.#.....#....##.#.#....###.#.....#....##.###..#.#.#.#.###...#.#.#.#
##....###.#.#.##.##.##.#.#...#..#.##....#...#.....###.#...#.##..##..##.#
.#.....#.##.##.###.#.###....###...#..#.##.##..#.##....#.###......#.####.
.#.#...#.##############...######..#........###.###.#...####...#...###..#
##.#####....###....#..####.##.#..##.##.#.....#...#.###...#.#..#####....#
##.###..#..####..###.###..####.#####.....###.#.###..##.#...#.#.##.##..##
####..##.###.#...###.##.....#.#..#....###..##.##..##..###.##.#....#.####
...#.####..#..#.#..##..#.##.#..#######...#...#...##.#..#.##..#.#.###.#.#
.#.#..###.#..#...#.....#.####..####....##.##..##..#.#.#...#.###...##.##.
..#####..#.#.#.#.########...##.#####.#..#....####..##..#######...#....#.
.#.##..##.###..#######...#...#.#.##.......#....#####....##.....#.####.#.
#..###.#######.#..#.##.##..###.####..#######.###...#.#.#.###..###.###.##
#.#..#.##.#..###.#.#.#####.#.#.###...##.#...#####.#..##....#...#...#..##
.#..#.....#.###..#.#..#...##.###...##..#..##.#....##.#.##.#.##...##..#..
.###.####....#..#.#........#.####.....#.#...###.###.##..#..#...###..#...
####...#...##..#..##.........#...###.#.####.#.##....#.##..#.#...########
##.#.#..####..####..######..##...###.#.#..##.#.#.#....######..#####..###
.##.##....#.##.###...##.##.....#.#.##...####.##...##.###...####...#.#..#
.#..###..#...##.#.#...#######..##...###..##....##.###..##.#..#.###..#.#.
.###..####..##...#...###.....##.#...###..#.#.##.....#.#..###.#####..####
.#.#.#..##.##..#####.##..#.##.#.#...#.#.#..#..#.##..#...##.#....###.##.#
.#...###.#..#####.#.....#####....####.###...####.#..###.#.##..#..##...##
.##...#.#...####.##.#.##...##.######.###.##...##...#.#.###.#..#####.....
.#....#...##.#..#..##...##..#.##...#..##.#.###.###..#.#..###.#.##.###...
.#..###.#.##..#.#.###.#.###...#..###.#..####.#.#.###.#.###..#.###..##...
#.####.##.##.#######.##.##..##.###.##.###.#.#..#.#.##....##.#..##.#.#.#.
...####.#####.#..##..###...#..#.#.#####..##..####.#....###.#.###.#...##.
.#######.##..###.....#..#.##..#.#.###.##.##...###.##...#.#.#.###.#.##.##
.#.#.##.#..#.#..##.##.#..###....##....#.##......#.#####..####.###.#.##.#
.##.#####....###...##.#..#..#..#.........#####..#.#....####.#....######.
...#..#...###...##...#.#.#.#.###.#.#..####.#...###.####...###..###.###..
.#...##.#....###......#####.....####.##.#.#.####..#...#..##....#####..##
########..#..#.##..#.#..##.###.#...##.#.###....####.##..#..#.#.#.#..#...
.#.#..#..#..#.#..######.#.#..##.......#...#..##...#.#.#..#..###....#...#
....#####.#.#.###.##.#...#......#.###.#####..#####...#####.###.#.#..#.#.
....####.#.#.#.##.###..##..#..#.##.#..###...#.##..#..#####..#....##....#
..##.##.#..###..####...#.##....####.###...###.........#...#..##..#.###..
....#.##...#.#.####.#.#......#..#.#.###.##....##.######....#.....#..#.#.
#.....#.#..#....#.#.#.#..#####.###..######.#.#....#.####.#.##.....##.###
...#.##..####.####.......##.#.#########...###.#####.##..#.#.#..#..#.#...
.#.##..#.##.#.##.##..##.##...####.#.###...##.##.#......#....##..#..#..#.
#..#...#...##.##..###.....#...########.#.###..###..##.##..#..##.####.###
..###....##...#...#..##.###.###..#.###..#.#.......#.####.##.#..##..####.
.###.#.###..#..#...#.#.##.##.#.#.#..#.#.#.#..##..#..#....##.##.##....#.#
........#..##.#.#.#..######.##.#.#.###.#..#..#.#.....#.#.....#.##.##..#.
#..#..##.#.#.####..#.#...#.#.###.###.##.#..#.##.####.#.##.#.#######.####
......#.##.#..##.##....#.#.....##..#.#..#.##.....#.......#.#....#.##..#.
..##.#.#.##.#...####........####.##....#.#...##....#...#.#...#..#.##.#.."""
test="""....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#.."""
# test=""".....
# ..##.
# ..#..
# .....
# ..##.
# ....."""
#a=test
b=[[1 if x=="#" else 0 for x in y] for y in a.splitlines()]
w,h = len(b[0]),len(b)
expand = 4#60
b= [[0 for _ in range(expand*2+w)] for _ in range(expand)] + [[0 for _ in range(expand)]+x+[0 for _ in range(expand)] for x in b] + [[0 for _ in range(expand*2+w)] for _ in range(expand)]
def printb(b):
    for line in b:
        print("".join(["#" if x==1 else "." for x in line]))
#top, bottom, left, right
dirs =  [[0,-1],[0,1],[-1,0],[1,0]]

tops = [[-1,-1],[0,-1],[1,-1]]
bottoms = [[-1,1],[0,1],[1,1]]
rights = [[1,-1],[1,0],[1,1]]
lefts = [[-1,-1],[-1,0],[-1,1]]

checks = [tops,bottoms,lefts,rights]
elves = [{"start":[i,j]} for i in range(len(b[0])) for j in range(len(b)) if b[j][i]==1]

def check(x,y,dirIndex2):
    global b
    cells = []
    for check in checks[dirIndex2]:
        dx,dy = check
        xx,yy=x+dx,y+dy
        cells.append(b[yy][xx])
    return sum(cells)==0

def checkAll(x,y):
    global b
    for check in checks:
        for dx,dy in check:
            xx,yy=x+dx,y+dy
            if b[yy][xx]==1: return False
    return True

def move(x,y,dirIndex): return [ x+dirs[dirIndex][0], y+dirs[dirIndex][1] ]


#graph
bb = b.copy()
from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import time
color_array = plt.get_cmap('gnuplot2')(range(256))
color_array[0] = [1.,1.,1.,1.]
color_array = color_array[::-1]
plt.register_cmap(cmap=LinearSegmentedColormap.from_list(name='gnuplot2_',colors=color_array))

plt.ion()
plot = plt.imshow(bb, interpolation="nearest",vmin=0,vmax=1,cmap="gnuplot2_")
fig, ax = plt.subplots()
plt.close(fig)
picNum = 0

def applyAge():
    global bb
    for j in range(len(bb)):
        for i in range(len(bb[0])):
            if bb[j][i]!=0:
                bb[j][i] += 1

def updateGraph(plot):
    global bb, picNum
    applyAge()
    plot.set_data(bb)
    fig.canvas.flush_events()
    plt.savefig(f'c:/temp/matplotlib/{picNum}.png', dpi=200)
    #ffmpeg -framerate 60 -i %d.png -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4
    picNum += 1
updateGraph(plot)


dirIndex = 0
for round in range(10000):
    print(round)
    movements = {}
    numMovements = 0
    for i,elf in enumerate(elves):
        x,y = elf["start"]
        done=False
        if checkAll(x,y):
            elf["new"] = elf["start"]
            continue
        for di in range(4):
            dirIndex2=(dirIndex+di)%4
            if check(x,y,(dirIndex2)%4):
                elf["new"] = move(x,y,dirIndex2)
                newStr = str(elf["new"])
                if newStr in movements:
                    movements[newStr].append(i)
                else: movements[newStr] = [i]
                done=True
                break
        if not done: elf["new"] = elf["start"]
    for movementKey in movements:
        movement = movements[movementKey]
        if len(movement)>1:
            for i in movement:
                elves[i]["new"] = elves[i]["start"]
            continue
        i=movement[0]
        x,y = elves[i]["start"]
        xx,yy = elves[i]["new"]
        b[y][x] = 0
        b[yy][xx] = 1
        bb[y][x] = 0
        bb[yy][xx] = 1
        elves[i]["start"] = elves[i]["new"]
        numMovements += 1
    dirIndex = (dirIndex+1)%4
    updateGraph(plot)
    if numMovements==0: 
        print(f"ended at round: {round+1}")#part2
        updateGraph(plot)
        break
    if round== 9:
        minX = min([i for i in range(len(b[0])) if 1 in [b[j][i] for j in range(len(b))]])
        maxX = max([i for i in range(len(b[0])) if 1 in [b[j][i] for j in range(len(b))]])
        minY = min([j for j in range(len(b)) if 1 in b[j]])
        maxY = max([j for j in range(len(b)) if 1 in b[j]])
        b2 = [x[minX:maxX+1] for x in b[minY:maxY+1]]
        print(f"round 10 empties: {sum([sum(1 for x in y if x==0) for y in b2])}") #part1
time.sleep(3)
    

#use ffmpeg to create an animation at 60fps from a folder of images labelled 0.png to 1111.png

#ffmpeg -framerate 60 -i %d.png -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4