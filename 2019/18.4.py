a="""#################################################################################
#........h#..........t..#...#.#e........#.............#.....#....g..#...........#
#.#######.#.#####.#####.#.#.#.#.#.#####.#.###########.#.#.###.#####.#.#.#.#####.#
#.#.....#.#.#.#...#.#...#.#.#...#.#.#...#...#.....#...#.#.....#..l#...#.#.#...#.#
#.#.###.#.#.#.#.###.#.###.#.#####.#.#.###.#.#.###.###.#####.###.#.#####.###.#.#.#
#.#.#.#.#.....#.#.........#.......#...#.#.#.#.#.#...#.....#...#.#.....#.....#.#.#
#.#.#.#.#######.###################.###.#.#.#.#.###.#####.###.#.#####.#######.#.#
#.#.#.#...#...#.........#.....#...#.#...#.#.......#.#.....#...#.#...#...#.....#.#
###I#.###.#.#.#########.#.###.#.#.#.#.#.#########.#.#####.#.###.#.#.###.#.#####.#
#...#...#.#.#.........#.#.#.#...#...#.#.#.....#...#.....#.#.#...#.#...#...#...#.#
#.###.#.#.#.#########.#.#.#.#########.#.#Q###.#.#######.#.###.#######.#######.#.#
#...#.#.....#...#.......#.#...........#.#.#...#.....#...#.....#.....#.........#.#
###.#########.#.#########.#####.###.###.#.#.#########.#######.#.###.###.###.###.#
#...#...#...#.#.........#.....#.#...#...#.#.........#.#...#...#.#.#...#.#.#.#...#
#.###.#.#.#.#.#########.#####.#.#.#####.#.#########.#.#.#.#.###.#.###.#.#.#.#.###
#.....#...#.#...#.....#...#.#.#.#.#...#.#...#.....#...#.#.#.#...#.....#...#...#.#
#.#########.###.#.#######.#.#.#.#.#.#.#.#.#.#.#########.###.#.#.#####.###.#####.#
#.#.....#.#.#.....#.......#...#.#...#.#.#.#.#.........#.....#.#.#...#.#.......#.#
#Z#.#.#.#.#.#.#####.#######.###C#####.#.###.#.#######.#.#####.###.#.#.#######.#.#
#.#.#.#...#.....#.D.#.....#.#.......#.#.#...#.#...#.#...#...#...#.#.#.....#...#.#
#.###.###.#######.###S###.#.#########.###.###.#.#.#.#####.#####.#.#.#####.###.#.#
#.#..u#...#j#...#...#.#...#.........#...#.#.#...#...#.......#.#...#.....#...#.#.#
#.#.###.###.#.#.#.#.###.###########.###.#.#.#######.#######.#.#.#######.###.#.#.#
#...#.......#r#.#.#...#...#.......#.....#.#...#...#.........#.#.......#.#.#.#...#
#.#####.#####.#.#.#.#.###.#.###.#.#####.#.###.#.#.###.#######.#########.#.#.###.#
#.#...#.#...#.#.#.#.#...#.#...#.#.#.....#...#...#.....#.....#...........#...#...#
###.#.###.#.#.#.###.#####.###.#.###.#####.#.#####.#####.###.#############.#####.#
#...#.....#...#...W.#...#s..#.#.....#...#.#.....#.#.....#..y..#.....#.....#...#.#
#F#################.#.#.###.#.#######.#.#.#####.###.#####.###.#.###.#.#####.#.#.#
#.........#.........#.#.B...#...#...#.#.#.....#.....#.#...#...#.#.#.#.......#.#.#
#####.###.###########.#########.#.#.#.#.#####.#######.#.#######.#.#.#########.###
#...#..v#...#.........#.......#...#.#.#.#.....#a......#...........#.#.....#.#...#
#.#.#######.#.#########.#####.#####.#.#.#.###########.#############.#.#.#.#.###.#
#.#.........#.#...#...#.....#.#...#.#.#.#.......#.....#..m......#...#.#.#...#...#
#.###########.#.#.###.#####.#.#.#.#.#.#########.#.###.#.#######.#.#.#.#.#####.###
#p....#n......#.#.........#.#...#...#...#.....#...#...#.#.......#.#.#.#x#.....#.#
#.###.#.#######.#########.#.#########.#.#.#.#.#####.#####.#####.#.###.#.#.#####.#
#.#.#.#.#.....#.....O...#.#.#.......#.#.#.#.#...#...#...#...#.#.#.#...#...#.....#
#.#.#.#.#.#####.#######.###.#####.#.###.#.#.#####.###.#.###.#.#.#.#.#########.#.#
#...#...#.............#...........#.......#..o........#.....#...#.............#.#
#######################################.@.#######################################
#q......M.............#.....#.....#.#.........#...#..w..........#.#.....#.......#
#######.#####.#######.#.#.#.#.###.#.#.#.#.###.###.#.###########.#.#.#.#.#####.#.#
#.....#...#...#.....#.#.#.#.#.#.#.#...#.#...#.....#...#...#...#.#...#.#...J...#.#
#.###.#####.###.#####.#.#.#.#.#.#.#####.###.#####.###.#.#.#.#.#.#####.#########.#
#.#.#.#.....#.......#.#.#.#...#.#.......#...#.#...#.#...#...#.#.......#.....#.#.#
#.#.#.#.###########.#.###.#####.#######.#.###.#.###.#########.#######.#.###V#.#.#
#.#...#.#...........#.....#.......#.....#.#...#.#.....#.#.R...#...#.#.#.#...#.#.#
#.#.###.#.###.#####.#######.###.#.#.#####.#.###.#.###.#.#.###.#.#.#.#.#.#.###U#.#
#.#.....#...#...#.#.#.......#.#.#.#.#...#.#...#...#.#.#.#...#.#.#.#..d#.#...#...#
#.#########.###.#.#.#.#######.#.#.#.###.#.#.#.#####.#.#.###.###.#.#####.###.#.###
#.#...#.......#.#...#...#.....#.#.#.#...#.#.#.#...........#....f#.......#.P.#...#
#.#.#.#########.#.#####.#.#####.#.#.#.###.#.#.#.#######.###########.#####.#####.#
#.Y.#.......#...#.....#.#...#...#.#.#...#.#.#...#.#...#.#.....#...#...#...#...#.#
#.#########.#.#####.###.###.#.###.#.###.#.#.#####.#.#.###.###.#.#.#####.###.###.#
#.#...#.....#.#.....#...#...#...#.#...#.#.#.#.....#.#.....#...#.#.......#...#...#
#.#.#.#.#####.#.#####.###.#.###.#####.#.#.#.#.###.#.#######.###N#########.###.###
#...#.#.#...#.#.....#...#.#...#.....#.#.#.#...#...#...#.....#...#.#.........#...#
#####.#.#.#.#.#########.#.###.#####.#.#.#.#####.#####.#.###.#.###.#.#######.###.#
#...#.#...#.#.............#.....#...#...#.#...#...#...#...#.#.#...#...#...#..z#.#
#K###.#####.#.###################.#####.#.#.#.###.#.#####.#.#.#.#.###.#.#.#.#.#.#
#.....#...#.#.#.....#.....#.....#.....#.#.#.#...#.#...#...#.#b#.#...#...#.#.#.#.#
#####.#.###.#.#####.#####.#.###.#####.#.#.#.###.###.###.###.#######.#####.#.###.#
#...#.#.#...#...#.......#...#.#.....#.#.#...#.#.#...#...#.........#...#...#.....#
#.#.#.#.#.#####.#.#####.#####.#####.#.#.#.###.#.#.###.###########.#.#.#.#########
#.#.#...#.#...#...#...#...#.#...#...#...#.#.A.#.....#.....#..k..#.#.#.#.#.......#
#.#.#####.###.#####.#####.#.#.#.#.###.###.###.#######.###.#####.#.#.###.#.#######
#.#.......#.......#.....#.#...#.#...#...#.......#...#.#.#.....#...#.#...#.......#
#X#########.#####.#.###.#.#####.###.#####.#######.#.#.#.#####.#.###.#.###.#####.#
#.....#.......#...#.#.#.#...#.....#.....#.#.......#.#...#.....#...#.#...#.....#.#
#####.#.#####.#.###.#.#.###.#.#########.###.#######.###.#.#######.#.###.#.#####.#
#.....#...#...#...#.#.#.....#.#...#.....#...#.....#.#...#.#.#.....#...#.#.#...#.#
#.#######.#.#######.#.#######.#.#.#.#####.#####.###.#####.#.#.#####.#.#.###.#.#.#
#.......#.#.............#.....#.#...#...#.....#.......#...#...#.....#.#.....#.#.#
#.#####.###############.#.###.#.#####.#.#.###.#######.#.###.#######.#.#######.#.#
#.#.....#...T.....#...#.#.#...#.....#.#.#...#.......#...#......c....#.......#...#
###.###.#.#######.#H#.#.#.#.#######.#.#####.#######.#####.#####.###############.#
#...#...#.#.#.....#.#.#...#...#.....#...#...#.E...#...#...#...#.#.......#.......#
#.#######.#.#.#####.#.#########.#######.#.###.###.###.#####.#.###.#####.#.#######
#.....L.....#.......#.............G..i..#.....#.....#.......#.........#.........#
#################################################################################"""


test="""#########
#b.A.@.a#
#########"""

test="""########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################"""

test="""########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################"""

test="""#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################"""

# test="""########################
# #@..............ac.GI.b#
# ###d#e#f################
# ###A#B#C################
# ###g#h#i################
# ########################"""


#a=test
grid=a.splitlines()
w,h = len(grid[0]),len(grid)
dirs = [[1,0],[0,1],[-1,0],[0,-1]]
wholeAlph = [chr(x) for x in range(130) if chr(x).isalpha()]
allDoors = sorted([x for x in a if x in wholeAlph and x.upper()==x])
allKeys = sorted([x for x in a if x in wholeAlph and x.lower()==x])
def toBitwise(keys): return int("0b"+"".join(["1" if x.lower() in keys else "0" for x in allKeys]),2)
allBits = toBitwise(allKeys)
translate = {"#":"â–’",".":" "}
for y in grid:
    print("".join([translate[x] if x in translate else x for x in y]))


tree1 = {}
tree2 = {}
for j,y in enumerate(grid):
    for i,x in enumerate(y):
        if x in ["@"] + wholeAlph:
            tree1[x]={}
            if x.lower()==x: 
                tree2[toBitwise([x])]={}
            seen = {}
            queue = [[i,j,0]]
            while queue:
                ii,jj,distance = queue.pop(0)
                if (ii,jj) in seen: continue
                seen[(ii,jj)] = distance
                for dx,dy in dirs:
                    xx,yy =  ii+dx,jj+dy
                    neighVal = grid[yy][xx]
                    if neighVal == "#": continue
                    if neighVal in wholeAlph:
                        tree1[x][neighVal] = distance+1
                        if x.lower()==x: 
                            tree2[toBitwise([x])][toBitwise([neighVal])] = distance+1
                        continue
                    queue.append([xx,yy,distance+1])

# for x in sorted(tree1): print(x," ", tree1[x])
# for x in sorted(tree2): print(x," ", tree2[x])
    # for y in tree1[x]:
    #     print(x,"=>",y,tree1[x][y])
distancesTree = {}
obstaclesTree = {}
for node in ["@"] + allKeys:
    nodeBits = toBitwise([node])
    seen = set({node})
    distancesTree[nodeBits] = {}
    obstaclesTree[nodeBits] = {}
    queue = [[node,0,0,0]]
    while queue:
        currentNode, distance, keysBits, doorBits = queue.pop(0)
        for newNode in tree1[currentNode]:
            if newNode in seen:  continue
            seen.add(newNode)

            newNodeIsKey = newNode.lower() == newNode
            newNodeBits = toBitwise([newNode.lower()])
            newDistance = distance + tree1[currentNode][newNode]
            newKeysBits = keysBits | (newNodeBits * newNodeIsKey)
            newDoorBits = doorBits | (newNodeBits * (not newNodeIsKey))

            if newNodeIsKey:
                distancesTree[nodeBits][newNodeBits] = newDistance
                obstaclesTree[nodeBits][newNodeBits] = newDoorBits
            queue.append([newNode, newDistance, newKeysBits, newDoorBits])

treeDistanceSorted = {x:sorted(distancesTree[x],key=lambda y: distancesTree[x][y],reverse=True) for x in distancesTree}

def bfs3():
    seen={}
    iterations=0
    queue=[[0,0,0]]
    best = 9999
    while queue:
        nodeBits, distance, keysBits = queue.pop()
        iterations += 1
        if iterations % 10_000_000==0: print(iterations)
        for newNodeBits in treeDistanceSorted[nodeBits]:
            
            if newNodeBits & keysBits == newNodeBits: continue #exclude keys that have already been picked up
            obstacles = obstaclesTree[nodeBits][newNodeBits]
            if obstacles & keysBits != obstacles: continue #exclude keys and doors that haven't yet been picked up

            newDist = distance + distancesTree[nodeBits][newNodeBits]
            if newDist >= best: continue
            newKeysBits = newNodeBits + keysBits
            seenNode = seen.setdefault(newNodeBits,{})
            seenDist = seenNode.setdefault(newKeysBits,newDist)
            if newDist > seenDist: continue
            if newDist < seenDist: 
                if newKeysBits == allBits and newDist < best: 
                    best = newDist
                    print(newDist,newNodeBits)
                seen[newNodeBits][newKeysBits] = newDist
            queue.append([newNodeBits, newDist, newKeysBits])
    return min([seen[x][allBits] for x in seen if allBits in seen[x]])
answer = bfs3()
print("answer",answer) # part 1  #7430