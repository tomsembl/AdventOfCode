a="""3,8,1005,8,319,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,1001,8,0,28,2,1008,7,10,2,4,17,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,1002,8,1,59,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,0,10,4,10,1001,8,0,81,1006,0,24,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,102,1,8,105,2,6,13,10,1006,0,5,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,1002,8,1,134,2,1007,0,10,2,1102,20,10,2,1106,4,10,1,3,1,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,1002,8,1,172,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,101,0,8,194,1,103,7,10,1006,0,3,1,4,0,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,101,0,8,228,2,109,0,10,1,101,17,10,1006,0,79,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,1002,8,1,260,2,1008,16,10,1,1105,20,10,1,3,17,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,1002,8,1,295,1,1002,16,10,101,1,9,9,1007,9,1081,10,1005,10,15,99,109,641,104,0,104,1,21101,387365733012,0,1,21102,1,336,0,1105,1,440,21102,937263735552,1,1,21101,0,347,0,1106,0,440,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21102,3451034715,1,1,21101,0,394,0,1105,1,440,21102,3224595675,1,1,21101,0,405,0,1106,0,440,3,10,104,0,104,0,3,10,104,0,104,0,21101,0,838337454440,1,21102,428,1,0,1105,1,440,21101,0,825460798308,1,21101,439,0,0,1105,1,440,99,109,2,22101,0,-1,1,21102,1,40,2,21101,0,471,3,21101,461,0,0,1106,0,504,109,-2,2106,0,0,0,1,0,0,1,109,2,3,10,204,-1,1001,466,467,482,4,0,1001,466,1,466,108,4,466,10,1006,10,498,1102,1,0,466,109,-2,2105,1,0,0,109,4,2101,0,-1,503,1207,-3,0,10,1006,10,521,21101,0,0,-3,21202,-3,1,1,22102,1,-2,2,21101,1,0,3,21102,540,1,0,1105,1,545,109,-4,2105,1,0,109,5,1207,-3,1,10,1006,10,568,2207,-4,-2,10,1006,10,568,22102,1,-4,-4,1106,0,636,22102,1,-4,1,21201,-3,-1,2,21202,-2,2,3,21102,587,1,0,1105,1,545,21201,1,0,-4,21101,0,1,-1,2207,-4,-2,10,1006,10,606,21102,0,1,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,628,22102,1,-1,1,21102,1,628,0,105,1,503,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2106,0,0"""
#a=test
b=[int(x) for x in a.split(",")]+[0 for _ in range(10000)]
#print([x for x in b if x>=1000])
i=0
# input=1#part1
# input=2#part2

def read(x,y):
    if (x,y) not in grid: grid[(x,y)] = 0
    return grid[(x,y)]

output=[]
base=0
grid={(0,0):1}
dirs=[[0,1],[1,0],[0,-1],[-1,0]]
dir=0
xx,yy=0,0
isPaint=True
while b[i]!=99:
    jumped=False
    opcode=str(b[i])
    opcode=(5-len(opcode))*"0"+opcode
    op = int(opcode[-2:])
    #print(["","add","mul","inp","out","jm1","jm0","grt","eql","bas"][op], b[i+1:i+(4 if op in [1,2,7,8] else 3 if op in [5,6] else 2)])
    p3,p2,p1=[int(x) for x in opcode[:-2]]
    if op in [1,2,7,8]:
        opLength = 4
        x,y,z = b[i+1:i+opLength]
        if p1==2: x+=base
        if p2==2: y+=base
        if p3==2: z+=base
        x = x if p1 == 1 else b[x]
        y = y if p2 == 1 else b[y] 
    elif op in [5,6]:
        opLength = 3
        x,y  = b[i+1:i+opLength]
        if p1==2: x+=base
        if p2==2: y+=base
        x = x if p1 == 1 else b[x]
        y = y if p2 == 1 else b[y] 
    elif op in [3,4,9]:
        opLength = 2
        x = b[i+1]
        if p1==2: x+=base
        if op in [4,9]:
            x = x if p1 == 1 else b[x] 

    if op==1: b[z] = x + y
    if op==2: b[z] = x * y
    if op==3: 
        b[x] = read(xx,yy)
    if op==4: 
        if isPaint: 
            grid[(xx,yy)]=x
        else:
            ddir = [-1,1][x]    #get dir
            dir+=ddir
            dir%=4
            dx,dy=dirs[dir]   #dir dy dx
            xx,yy = xx+dx,yy+dy   #move forward
        isPaint = not isPaint
    if op==5 and x!=0:
        jumped = True
        i=y
    if op==6 and x==0:
        jumped = True
        i=y
    if op==7: b[z] = int(x < y)
    if op==8: b[z] = int(x == y)
    if op==9: base+=x
    if not jumped: i+=opLength
print(len(grid)) #part1

maxX = max([x for x,_ in grid])
maxY = max([y for _,y in grid])
minX = min([x for x,_ in grid])
minY = min([y for _,y in grid])
print(minX,maxX,minY,maxY)
w,h = abs(maxX-minX), abs(maxY-minY)
matrix=[[0 for x in range(w+1)] for y in range(h+1)]
for coord in grid:
    x,y = coord
    x-=minX
    y-=minY
    matrix[y][x]=grid[coord]
for line in matrix[::-1]:
    print("".join([" â–ˆ"[x] for x in line]))#part2
