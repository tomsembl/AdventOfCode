a="1,330,331,332,109,3438,1102,1182,1,16,1101,1449,0,24,101,0,0,570,1006,570,36,101,0,571,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1449,570,1006,570,14,21101,58,0,0,1106,0,786,1006,332,62,99,21102,333,1,1,21102,73,1,0,1106,0,579,1101,0,0,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,101,0,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1105,1,81,21101,0,340,1,1106,0,177,21101,0,477,1,1105,1,177,21101,0,514,1,21102,1,176,0,1105,1,579,99,21102,1,184,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,101,0,572,1182,21101,0,375,1,21102,211,1,0,1106,0,579,21101,1182,11,1,21102,222,1,0,1106,0,979,21102,1,388,1,21102,233,1,0,1105,1,579,21101,1182,22,1,21101,244,0,0,1105,1,979,21102,401,1,1,21102,255,1,0,1105,1,579,21101,1182,33,1,21102,1,266,0,1105,1,979,21102,1,414,1,21101,277,0,0,1106,0,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,1182,0,1,21102,1,313,0,1106,0,622,1005,575,327,1101,1,0,575,21102,327,1,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,12,16,0,109,4,1202,-3,1,586,21001,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2106,0,0,109,5,1201,-4,0,630,20102,1,0,-2,22101,1,-4,-4,21102,1,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20101,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,702,1,0,1106,0,786,21201,-1,-1,-1,1106,0,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,756,1,0,1106,0,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1106,0,622,21201,-3,1,-3,1105,1,640,109,-5,2105,1,0,109,7,1005,575,802,20101,0,576,-6,20101,0,577,-5,1106,0,814,21101,0,0,-1,21102,0,1,-5,21102,0,1,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,51,-3,22201,-6,-3,-3,22101,1449,-3,-3,1202,-3,1,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21102,1,1,-1,1105,1,924,1205,-2,873,21101,0,35,-4,1106,0,924,1202,-3,1,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1102,2,1,0,2102,1,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,51,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,39,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,1,0,575,21101,973,0,0,1106,0,786,99,109,-7,2106,0,0,109,6,21102,1,0,-4,21102,1,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21101,-4,0,-2,1106,0,1041,21102,-5,1,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1202,-2,1,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2101,0,-2,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21102,439,1,1,1105,1,1150,21101,0,477,1,1106,0,1150,21102,514,1,1,21102,1,1149,0,1105,1,579,99,21102,1,1157,0,1106,0,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1201,-5,0,1176,2102,1,-4,0,109,-6,2105,1,0,38,7,44,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,20,9,9,7,5,1,28,1,9,1,11,1,28,1,9,1,9,9,22,1,9,1,9,1,1,1,5,1,22,1,9,1,5,7,5,1,22,1,9,1,5,1,3,1,7,1,22,13,3,1,3,1,7,1,32,1,1,1,3,1,3,1,7,14,19,9,1,1,7,2,33,1,3,1,1,1,1,1,7,2,17,7,9,1,3,5,1,8,17,1,5,1,9,1,5,1,3,1,6,1,15,5,3,1,9,7,3,1,6,1,15,1,1,1,1,1,3,1,19,1,6,9,7,1,1,9,17,1,14,1,7,1,3,1,3,1,1,1,17,1,14,1,7,1,3,1,3,13,7,1,14,1,7,1,3,1,5,1,9,1,7,1,14,1,5,7,5,1,9,1,7,1,14,1,5,1,1,1,9,1,9,1,7,1,14,9,9,1,9,1,7,1,20,1,11,1,9,1,7,1,20,1,5,7,9,9,20,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,44,1,5,1,44,7,30"

def computer(a,b0):
    b=[int(x) for x in a.split(",")]+[0 for _ in range(10000)]
    b[0] = b0
    i=0
    base=0
    input=1
    output=[]

    while b[i]!=99:
        jumped=False
        opcode=str(b[i])
        opcode=(5-len(opcode))*"0"+opcode
        op = int(opcode[-2:])
        p3,p2,p1=[int(x) for x in opcode[:-2]]
        if op in [1,2,7,8]:
            opLength = 4
            x,y,z = b[i+1:i+opLength]
            if p1==2: x+=base
            if p2==2: y+=base
            if p3==2: z+=base
            x = x if p1 == 1 else b[x]
            y = y if p2 == 1 else b[y] 
        elif op in [5,6]:
            opLength = 3
            x,y  = b[i+1:i+opLength]
            if p1==2: x+=base
            if p2==2: y+=base
            x = x if p1 == 1 else b[x]
            y = y if p2 == 1 else b[y] 
        elif op in [3,4,9]:
            opLength = 2
            x = b[i+1]
            if p1==2: x+=base
            if op in [4,9]:
                x = x if p1 == 1 else b[x] 
        if op==1: b[z] = x + y
        if op==2: b[z] = x * y
        if op==3: 
            b[x] = input
        if op==4: 
            output.append(x)
        if op==5 and x!=0:
            jumped = True
            i=y
        if op==6 and x==0:
            jumped = True
            i=y
        if op==7: b[z] = int(x < y)
        if op==8: b[z] = int(x == y)
        if op==9: base+=x
        if not jumped: i+=opLength
    return output

# charMap = computer(a,1)
# matrix = "".join([chr(x) for x in charMap])
test="""#######...#####
#.....#...#...#
#.....#...#...#
......#...#...#
......#...###.#
......#.....#.#
^########...#.#
......#.#...#.#
......#########
........#...#..
....#########..
....#...#......
....#...#......
....#...#......
....#####......"""
matrix=test
print(matrix)
matrix=matrix[:-1].splitlines()
w,h = len(matrix[0]),len(matrix)

dirs = [[1,0],[0,1],[-1,0],[0,-1]]

def getNeighs(x,y):
    return [(x+z[0],y+z[1]) for i,z in enumerate(dirs)]

def FindTurn(x,y,neighs,dir):
    for turn in [0,-1,1]:
        xx,yy = neighs[(dir+turn)%4]
        if 0<=xx<w and 0<=yy<h:
            if matrix[yy][xx] != ".":
                return turn
    return None

def pathFind():
    x,y = [[(i,j) for i,x in enumerate(y) if x in "<>^v"] for j,y in enumerate(matrix) if any([x in y for x in "<>^v"])][0][0]
    dir = ">v<^".index(matrix[y][x])
    path=[]
    length = 0
    while True:
        neighs = getNeighs(x,y)
        turn = FindTurn(x,y,neighs,dir)
        if turn == 0:
            length += 1
            dx,dy = dirs[dir]
            x,y = x+dx,y+dy
            continue
        if turn == None:
            path.append(length)
            return path
        path += ([length] if length > 0 else [])+["L R"[turn+1]]
        length = 0
        dir += turn
        dir %= 4


path = pathFind()
pathStr = ",".join([str(x) for x in path])
print(pathStr)
for x in range(2,19,2):
    for y in range(2,19,2):
        a = path[:x]

        i = 0
        while path[i:i+len(a)] == a:
            i += len(a)
        b = path[i:i+y:]

        i = 0
        while True:
            for z in [a,b]:
                if path[i:i+len(z)] == z:
                    i += len(z)
                    continue
            cStart = i
            break
        breakFlag = False
        #if a==['R', 8, 'R', 8] and b==['R', 4, 'R', 4, 'R', 8]:
        for i in range(19):
            if breakFlag: break
            for z in [a,b]:
                slice = path[cStart+i:cStart+i+len(z)]
                #print(slice)
                if slice == z or cStart+i==len(path)-1:
                    cEnd = cStart+i
                    breakFlag = True
                    break
        c = path[cStart:cEnd]
        for i in range(2,len(c)//2+1,2):
            if c[:i] * (len(c)//i) == c:
                c = c[:i]
                break
        if any([z == [] for z in [a,b,c]]): continue
        functions = sorted([",".join([str(z) for z in zz]) for zz in [a,b,c]],key=lambda x: -len(x))
        firstPrompt = pathStr[::]
        for i,z in enumerate(functions):
            firstPrompt = firstPrompt.replace(z,"ABC"[i])
        if all([not z.isnumeric() for z in firstPrompt]):
            print(firstPrompt,functions)
            #break
        #print(firstPrompt,strs)