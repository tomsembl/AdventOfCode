a="""[[[[6,3],7],0],[[7,0],0]]
[[[4,7],[6,[6,5]]],[4,[[6,5],[9,1]]]]
[[[[3,7],[6,9]],[3,[4,1]]],8]
[[[0,[2,0]],3],2]
[[[[1,3],4],9],[[[1,8],[9,3]],[0,7]]]
[[[5,9],1],[[[4,8],[4,8]],[[9,7],[3,6]]]]
[[[0,7],4],[[[0,4],2],[4,2]]]
[[5,1],[2,5]]
[[[[4,8],[8,3]],[6,[2,3]]],[[6,0],[1,3]]]
[[[[1,7],[8,1]],[2,[3,4]]],[[7,[8,7]],[[8,6],5]]]
[[9,[[8,9],[0,6]]],[[[8,4],5],[0,[1,7]]]]
[[[[9,8],[6,9]],[[3,5],[6,2]]],[[[7,8],5],8]]
[[[[7,1],8],[0,2]],[3,5]]
[[[1,9],3],[8,[8,[7,8]]]]
[[[9,[8,5]],[1,[9,0]]],5]
[9,[[[1,1],8],[[3,5],9]]]
[[[1,[7,8]],2],[8,0]]
[7,[8,[[6,1],[7,9]]]]
[[7,[[4,7],7]],[[8,[5,2]],2]]
[[[[1,7],[9,0]],3],[8,[4,[2,0]]]]
[[4,3],[[9,[7,7]],7]]
[[[[9,5],3],[[8,5],5]],5]
[[[[4,9],2],[[5,6],[9,0]]],[[2,[2,2]],1]]
[[[[7,9],[6,0]],[1,[5,8]]],[8,8]]
[[[[0,5],2],[4,[5,7]]],[8,[[8,1],[6,7]]]]
[9,[7,[[3,7],[6,4]]]]
[[[[5,3],[5,2]],[[5,0],0]],[[[4,6],[6,4]],[8,8]]]
[1,[[8,0],0]]
[[3,[7,9]],[[[1,2],[1,6]],[[9,2],[2,8]]]]
[[[2,8],[3,[8,3]]],[3,[[9,8],[5,6]]]]
[[[[2,0],3],[5,1]],[[[2,9],7],[[0,4],[1,4]]]]
[[3,[[0,0],[9,0]]],[[6,[0,5]],[[5,4],[5,2]]]]
[[8,[[9,4],[6,8]]],[3,[[8,1],4]]]
[[[[4,1],[5,1]],[4,[9,1]]],4]
[2,[[[0,5],[8,7]],[[6,1],[1,0]]]]
[7,[8,8]]
[[[[7,3],5],9],[[[5,9],[3,5]],[[9,4],8]]]
[[[[4,2],[6,1]],[[6,6],7]],[2,2]]
[[[1,1],4],[[[4,8],0],[[6,7],7]]]
[[[[5,9],[0,1]],[9,7]],2]
[[[[6,4],[5,5]],[[2,8],0]],9]
[[7,[4,9]],[5,[[0,2],2]]]
[[2,[9,9]],[[8,5],8]]
[3,[8,[6,[2,8]]]]
[[[0,1],[[8,5],[8,9]]],0]
[[[[1,8],[1,4]],8],[[6,8],[8,[5,7]]]]
[[[[7,1],[2,0]],[2,4]],[[[3,7],[2,2]],1]]
[[[[0,3],[8,0]],[2,6]],[[6,2],[0,4]]]
[[[7,1],[[6,8],[3,2]]],[[8,[3,2]],[1,[0,1]]]]
[[[8,[5,7]],4],[[1,[1,9]],[[4,9],[4,2]]]]
[[[8,5],3],[[9,8],[[4,4],[7,2]]]]
[[5,[5,[8,7]]],[[8,0],[[6,3],6]]]
[[[8,4],[[5,2],[7,0]]],[[[9,7],[8,9]],7]]
[[5,[3,[3,0]]],5]
[[[[0,1],[0,0]],[4,[3,7]]],[8,0]]
[5,[[[8,3],8],5]]
[[[5,[0,6]],4],[4,[3,[6,3]]]]
[[[[4,1],[3,5]],[[5,0],7]],[[[7,9],[8,8]],[[8,0],[5,8]]]]
[[[7,[6,6]],[[6,2],2]],8]
[1,[4,[[2,9],[3,8]]]]
[[[9,[5,4]],[[2,5],7]],[[4,2],9]]
[[9,1],[[0,7],[[4,1],[5,6]]]]
[[[7,[8,6]],[[4,5],1]],[[[2,1],[6,3]],[4,[0,3]]]]
[[0,[2,[7,5]]],[[[5,0],5],3]]
[[[0,[4,1]],7],[[[3,7],5],[[5,9],7]]]
[[4,[[1,3],1]],[[9,6],[[6,2],3]]]
[3,[[[8,5],6],4]]
[[2,7],[[[3,9],3],[[2,1],2]]]
[[4,[5,[9,9]]],[[[3,0],[4,1]],[[6,4],9]]]
[[[7,9],[[5,7],[2,1]]],[[[1,4],6],[3,3]]]
[[[[4,0],3],[3,[6,3]]],[[[6,2],4],5]]
[[9,[[2,4],3]],[[9,[1,0]],[[5,8],[7,1]]]]
[8,[1,5]]
[[[5,5],3],[[[8,9],3],4]]
[[1,[[8,8],[7,4]]],[[[9,1],[9,6]],[7,8]]]
[[[7,2],[[0,1],5]],7]
[[9,3],[7,[1,[9,2]]]]
[[[[8,2],[8,0]],[[7,1],6]],[0,[[9,4],1]]]
[[[[1,3],2],[6,[0,0]]],[[[7,8],[4,3]],[[9,4],1]]]
[[[[2,1],[7,1]],[[5,4],[9,2]]],[[3,0],0]]
[[[8,6],[[2,1],[9,1]]],[[3,[1,8]],[3,3]]]
[[[[6,2],[3,6]],3],[5,9]]
[[[[7,6],7],[[4,2],1]],[[0,4],[[9,8],6]]]
[[8,[[7,6],[8,5]]],[[2,7],[[7,0],[0,0]]]]
[[[0,[0,0]],4],[[[6,1],8],[[5,9],[6,5]]]]
[[[8,[9,9]],9],[[3,[2,8]],[[9,5],[2,9]]]]
[[[7,5],[[0,7],[3,3]]],[[8,[1,5]],9]]
[[[6,[9,0]],[[0,7],[7,5]]],[[[4,9],0],[[2,3],7]]]
[[8,[8,[0,1]]],[[2,6],7]]
[1,[[9,3],1]]
[[[[6,2],[0,8]],5],[[[9,4],7],[[6,3],6]]]
[[[8,[4,2]],[4,9]],[7,[[9,0],8]]]
[1,[[7,3],2]]
[[[3,[5,9]],[7,[0,4]]],[[[3,0],7],4]]
[[[1,[8,3]],[4,[2,3]]],[[3,[1,6]],[[1,6],5]]]
[[[[1,3],2],9],[5,[4,9]]]
[[[7,[0,6]],2],[[[1,5],[0,7]],[4,9]]]
[[[5,0],[0,[1,1]]],5]
[[[[9,3],[0,0]],[[1,3],[7,3]]],[[5,7],[[6,6],[6,5]]]]
[[[8,0],[9,0]],[[[4,7],4],[5,[2,6]]]]"""
test="""[[[[4,3],4],4],[7,[[8,4],9]]]
[1,1]"""
test="""[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]"""
test = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"""
#a=test
def SFadd(x,y): return f"[{x},{y}]"

def splitPunctuation(text):
    chunks,indexes = [],[]
    isPunc, y, j = True, "", 0
    for i,x in enumerate(text):
        if x in ",[]" and isPunc or x not in ",[]" and not isPunc:
            y+=x
            continue
        if x in ",[]" and not isPunc or x not in ",[]" and isPunc:
            chunks.append(y if isPunc else int(y))
            indexes.append(j)
            y,j = x,i
            isPunc = not isPunc
            continue
    chunks.append(y if isPunc else int(y))
    indexes.append(j)  
    return chunks,indexes


def explode(text):
    #print(text)
    depth=0
    for i,x in enumerate(text):
        if depth >= 5: #split
            pairStart = i-1
            pairComma = pairStart + text[pairStart:].find(",")
            pairEnd = pairStart + text[pairStart:].find("]")
            pairStr = text[pairStart:pairEnd+1]
                #print(pairStart, pairStr, "explode")
            pair = eval(pairStr)
            chunks,indexes = splitPunctuation(text)
                #print(chunks,indexes)
            #add left
            leftNumberIndex = indexes.index(pairStart+1)
            if leftNumberIndex > 2:
                chunks[leftNumberIndex-2] += pair[0]
            #add right
            rightNumberIndex = indexes.index(pairComma+1)
            if rightNumberIndex < len(chunks)-2:
                chunks[rightNumberIndex+2] += pair[1]
            #remove pair #       before,                       punctuation minus a bracket at end, zero, punctuation minus a bracket at start,  after
            chunks = chunks[:leftNumberIndex-1] + [ chunks[leftNumberIndex-1][:-1], 0, chunks[rightNumberIndex+1][1:] ] + chunks[rightNumberIndex+2:]
            text = "".join([str(x) for x in chunks])
            break
        if x == "[":
            depth += 1
            continue
        if x == "]":
            depth -= 1
            continue
    #print(text)
    return text

def split(text):
    chunks,_ = splitPunctuation(text)
    for i,x in enumerate(chunks):
        if type(x) == int and x > 9:
            chunks[i] = f"[{x//2},{x//2 + int((x%2)>0)}]"
            break
    answer = "".join([str(x) for x in chunks])
    #print(answer)
    return answer
def score(node):
    if type(node)==int: return node
    return score(node[0])*3 + score(node[1])*2

b=a.splitlines()
def part1():
    x = b[0]
    for y in b[1:]:
        print(text := SFadd(x,y))
        while True:
            text2 = explode(text)
            if text2 != text: 
                text = text2
                continue
            text2 = split(text)
            if text2 != text: 
                text = text2
                continue
            break
        x = text
    tree = eval(x)
    print(score(tree))
#part1()
def part2():
    highestScore = 0
    for i,x in enumerate(b):
        for j,y in enumerate(b):
            if i==j: continue
            print(text := SFadd(x,y))
            while True:
                text2 = explode(text)
                if text2 != text: 
                    text = text2
                    continue
                text2 = split(text)
                if text2 != text: 
                    text = text2
                    continue
                break
            tree = eval(text)
            highestScore = max(score(tree), highestScore)
    print(highestScore)
part2()