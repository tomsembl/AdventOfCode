a="""../.. => ..#/#.#/###
#./.. => .#./#../###
##/.. => #.#/#.#/..#
.#/#. => .##/..#/#..
##/#. => #../#.#/#..
##/## => #.#/.#./#..
.../.../... => ####/##../#.../#...
#../.../... => ##.#/####/.#../....
.#./.../... => ...#/...#/#.../.##.
##./.../... => ###./#.##/#..#/...#
#.#/.../... => ##.#/###./.#.#/##..
###/.../... => .###/#..#/..##/.##.
.#./#../... => ####/#..#/#..#/#..#
##./#../... => #.##/###./##../#...
..#/#../... => ..##/.#.#/..#./.###
#.#/#../... => .##./.#../..#./###.
.##/#../... => ####/..../###./###.
###/#../... => .#.#/.###/##.#/#..#
.../.#./... => ..../.#../.##./..#.
#../.#./... => #.##/..#./####/#.##
.#./.#./... => .#.#/.###/#.#./.#.#
##./.#./... => #..#/#.#./...#/.###
#.#/.#./... => .##./#..#/####/.###
###/.#./... => #.../..../.#.#/##..
.#./##./... => #..#/..##/.##./.#.#
##./##./... => ..##/#..#/####/###.
..#/##./... => ####/.#.#/#.##/#.##
#.#/##./... => .###/...#/#.../...#
.##/##./... => ..##/.#.#/#.../##.#
###/##./... => ##../..#./..#./#...
.../#.#/... => .#.#/##../#..#/.#.#
#../#.#/... => #.##/...#/##../...#
.#./#.#/... => #.../..##/#..#/.##.
##./#.#/... => .##./..##/.#../..#.
#.#/#.#/... => .#../#..#/#.#./....
###/#.#/... => ##.#/..##/##../#...
.../###/... => #.../..#./##../#.##
#../###/... => ..#./#.../##../.##.
.#./###/... => ###./.#.#/..##/##.#
##./###/... => ##.#/#.../##.#/#.#.
#.#/###/... => ..##/...#/##../#..#
###/###/... => ##.#/.###/...#/#..#
..#/.../#.. => .##./#.##/..#./####
#.#/.../#.. => ..#./###./#.../##.#
.##/.../#.. => ...#/...#/.#../.###
###/.../#.. => .##./.#../##../#.#.
.##/#../#.. => ####/..##/#.../##..
###/#../#.. => #.../#..#/####/##..
..#/.#./#.. => .##./##.#/.#../###.
#.#/.#./#.. => ..../.###/###./.#.#
.##/.#./#.. => #.##/#..#/###./..#.
###/.#./#.. => #.../..#./##../.#.#
.##/##./#.. => .##./.#.#/#..#/#..#
###/##./#.. => .#../.#.#/#..#/....
#../..#/#.. => ####/..##/..##/.###
.#./..#/#.. => ###./.###/..#./##.#
##./..#/#.. => .###/####/#.../#.##
#.#/..#/#.. => #.##/#..#/.#.#/...#
.##/..#/#.. => #.../##../..##/##.#
###/..#/#.. => ###./##.#/#.../.#..
#../#.#/#.. => #.#./#.../##../..#.
.#./#.#/#.. => .###/#.#./...#/##.#
##./#.#/#.. => .#../#.##/##.#/#.#.
..#/#.#/#.. => .#../#..#/.#../.#.#
#.#/#.#/#.. => .#../.##./..../..#.
.##/#.#/#.. => .##./.#../####/#.##
###/#.#/#.. => ..#./##../##../#.#.
#../.##/#.. => #.##/.##./..#./..##
.#./.##/#.. => ###./#.#./#.../###.
##./.##/#.. => ####/#.../#.../#.#.
#.#/.##/#.. => .###/#..#/###./#..#
.##/.##/#.. => #.../####/###./###.
###/.##/#.. => .#../.#.#/##../.#..
#../###/#.. => ..#./.##./.###/##..
.#./###/#.. => ####/.##./####/....
##./###/#.. => #.../#.../#.##/.##.
..#/###/#.. => .#.#/.###/...#/....
#.#/###/#.. => ###./..##/.#../#.##
.##/###/#.. => ...#/.#../##../.#..
###/###/#.. => ...#/#.##/.#.#/..##
.#./#.#/.#. => .###/#.../..#./.##.
##./#.#/.#. => ###./##.#/..#./##.#
#.#/#.#/.#. => #.../##.#/..#./#...
###/#.#/.#. => ...#/...#/#..#/...#
.#./###/.#. => #.#./.##./#.#./.###
##./###/.#. => #.../####/..##/#...
#.#/###/.#. => ##../.##./.###/###.
###/###/.#. => ..#./.##./.#../#.#.
#.#/..#/##. => ...#/#.##/##../...#
###/..#/##. => ...#/#.../###./###.
.##/#.#/##. => ##.#/.#.#/.#../....
###/#.#/##. => .##./..../##.#/..#.
#.#/.##/##. => .#../###./#.#./##..
###/.##/##. => #.##/#..#/#.#./###.
.##/###/##. => #.##/###./..../##..
###/###/##. => .#../####/.###/##..
#.#/.../#.# => #.../#..#/..##/##.#
###/.../#.# => #..#/.#.#/####/#.##
###/#../#.# => ###./##../##.#/...#
#.#/.#./#.# => .##./.#.#/#.../...#
###/.#./#.# => .#../.#../..../#.#.
###/##./#.# => #.#./#.#./#.../.#..
#.#/#.#/#.# => ..../####/####/..#.
###/#.#/#.# => #..#/.##./#.../##..
#.#/###/#.# => ###./...#/#.##/##..
###/###/#.# => #.##/#.../#..#/###.
###/#.#/### => ..../...#/###./..#.
###/###/### => #..#/..../#.../#.##"""

test="""../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#"""
#a=test

startingPattern=".#./..#/###"

def strPattern2Matrix(c): return [[".#".index(x) for x in y] for y in c.split("/")]
def matrixPattern2Bin(c): return "".join(["".join([str(x) for x in y]) for y in c])
def strPattern2Bin(c): return "".join(["".join([str(".#".index(x)) for x in y]) for y in c.split("/")])

def splitMatrix(matrix):
    s=len(matrix)
    size = 2 if s%2==0 else 3
    return [[yy[x:x+size] for yy in matrix[y:y+size]] for y in range(0,s,size) for x in range(0,s,size)]

def joinMatrices(matrices):
    n = len(matrices)
    sqrtN = int(n**0.5)
    wh = len(matrices[0])
    newMatrix = []
    for z in range(sqrtN):
        for y in range(wh):
            newMatrix.append([])
            for matrix in matrices[z*sqrtN:z*sqrtN+sqrtN]:
                newMatrix[z*wh+y].extend(matrix[y])
    return newMatrix

def perms(bin):
    size = 2 if len(bin)==4 else 3
    result=set()
    cut=[]
    for i in range(0,len(bin),size):
        cut.append(bin[i:i+size])
    for _ in range(4):
        cut = [list(x[::-1]) for x in zip(*cut)]
        vflip = cut[::-1]
        hflip = [x[::-1] for x in cut]
        for x in [cut,vflip,hflip]: 
            num = int(matrixPattern2Bin(x),2)
            result.add(num)
    return list(result)

binPatterns=[[strPattern2Bin(x) for x in y.split(" => ")] for y in a.splitlines()]
matrixPatterns=[[strPattern2Matrix(x) for x in y.split(" => ")] for y in a.splitlines()]
dicti={2:{},3:{}}

for i,x in enumerate(binPatterns):
    binInput, binOutput = x
    matrixInput, matrixOutput = matrixPatterns[i]
    intInputs = perms(binInput)
    output = matrixPatterns
    size = 2 if len(binInput)==4 else 3
    for intInput in intInputs:
        dicti[size][intInput] = matrixOutput

def solve(iterations):
    MATRIX = strPattern2Matrix(startingPattern)
    for _ in range(iterations):
        # for row in MATRIX:
        #     print("".join([".#"[x] for x in row]))
        bits = splitMatrix(MATRIX)
        outputMatrices = []
        for bit in bits:
            bin = matrixPattern2Bin(bit)
            size = 2 if len(bin)==4 else 3
            outputMatrix = dicti[size][int(bin,2)]
            outputMatrices.append(outputMatrix)
        MATRIX = joinMatrices(outputMatrices)
    print(matrixPattern2Bin(MATRIX).count("1"))
solve(5)
solve(18)